x<-25
hello<-"Hello there"
print(hello)
hello
help(c)
x<-c(1,2,2,5,5,10)
min(x)
max(x)
mean(x)
x<-c(1,2,2,5,5,10)
min(x)
max(x)
mean(x)
,5,10)
min(x)
max(x)
mean(x)
x<-c(1,2,2,NA,5,10)
min(x)
max(x)
mean(x)
?NA
?min()
min(x, na.rm = TRUE)
min(x, na.rm = TRUE)
max(x, na.rm = TRUE)
mean(x, na.rm = TRUE)
ls
ls()
rm(list-ls())
### Company   : Stevens
# Project     :
# Purpose     :
# First Name  : Derek
# Last Name   : Pulaski
# Id          : 10409595
x<-25
x
hello<-"Hello there"
print(hello)
hello
help()
help(c)
?c()
example(c)
help.start()
x<-c(1,2,2,NA,5,10)
min(x, na.rm = TRUE)
max(x, na.rm = TRUE)
mean(x, na.rm = TRUE)
?NA
?min()
y <- mean(x,na.rm = TRUE)
y
summary(y)
ls()
cat<-c("good", "bad", "good", "bad", "bad", "bad", "good")
typeof(cat)
cat2<-factor(cat)
cat2
typeof(cat2)
typeof(cat2)
cat3<-as.integer(cat)
cat4<-as.integer(cat2)
days<-c("Monday", "Sunday", "Tuesday", "Wednesday", "Thursday", "Saturday")
days
days_factor<-factor(days)
days<-c("Monday", "Sunday", "Tuesday", "Wednesday", "Thursday", "Saturday")
days
days_factor<-factor(days)
days_factor
days_factor<-factor(days, levels = (c("Monday",  "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday","Sunday",)))
days_factor<-factor(days, levels = (c("Monday",  "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday","Sunday")))
days_factor
x<-1:9
?matrix(x)
mx1<- matrix(x, nrow =3, ncol =3, byrow = FALSE)
is.matrix(mx1)
mx1
my.lst <- list(123123, c("derek", "pulaski"), c(1,3,4,5,6))
my.lst
my.lst <- list(stud.id = 14234, stud.name=c("First","last"))
rm(list-ls())
rm(list-ls())
rm(list<-ls())
rm(list->ls())
rm(list-ls())
### Company   : Stevens
# Project     :
# Purpose     :
# First Name  : Derek
# Last Name   : Pulaski
# Id          : 10409595
x<-25
x
hello<-"Hello there"
print(hello)
hello
help()
help(c)
?c()
example(c)
help.start()
x<-c(1,2,2,NA,5,10)
min(x, na.rm = TRUE)
max(x, na.rm = TRUE)
mean(x, na.rm = TRUE)
?NA
?min()
y <- mean(x,na.rm = TRUE)
y
summary(y)
x3<-seq(from=10.2,to=26.5, by=2.1)
mode(x3)
typeof(x3)
x5<-seq(from=1,to=6,by=1)
x6<-1:6
typeof(x6)
x7<-as.integer(x5)
typeof(x7)
x8<-c(x6,hello)
typeof(x8)
firstname<-"Derek"
lastname<-"Pulaski"
fullName<-c(firstname, lastname)
?factor()
cat<-c("good", "bad", "good", "bad", "bad", "bad", "good")
typeof(cat)
cat2<-factor(cat)
cat2
typeof(cat2)
cat3<-as.integer(cat)
cat4<-as.integer(cat2)
days<-c("Monday", "Sunday", "Tuesday", "Wednesday", "Thursday", "Saturday")
days
days_factor<-factor(days)
days_factor
days_factor<-factor(days, levels = (c("Monday",  "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday","Sunday")))
x<-1:9
?matrix(x)
mx1<- matrix(x, nrow =3, ncol =3, byrow = FALSE)
is.matrix(mx1)
mx1
my.lst <- list(123123, c("derek", "pulaski"), c(1,3,4,5,6))
my.lst <- list(stud.id = 14234, stud.name=c("First","last"))
my.dataset <- data.frame(site=c('A','B'), ph =c(7,4))
data()
data(iris)
subset3<-iris[c(T,F,F,F), c(2,3,4)]
subset3
idx<-sample(nrow(iris), as.integer(.75)*nrow(iris))
training<-iris[idx,]
idx<-sample(nrow(iris), as.integer(.75)*nrow(iris))
training<-iris[idx,]
test<-iris[-idx,]
test
training
idx<-sample(nrow(iris), as.integer(.75*nrow(iris)))
training<-iris[idx,]
test<-iris[-idx,]
training
test
test
rm(list=ls())
rm(list=ls())
source('C:/Users/kille/Downloads/Mod07_function.R', echo=TRUE)
install.packages("kknn")
installed.packages()
source('~/mod7.r', echo=TRUE)
source('~/mod7.r', echo=TRUE)
source('~/mod7.r', echo=TRUE)
source('~/mod7.r', echo=TRUE)
source('~/mod7.r', echo=TRUE)
source('~/mod7.r', echo=TRUE)
source('~/mod7.r', echo=TRUE)
source('~/mod7.r', echo=TRUE)
df <- read.csv("breast-cancer-wisconsin.data.csv", header = TRUE)
summary(df)
df <- as.data.frame(df)
df[!complete.cases(df),]
df[df=="?"]<-NA
df[!complete.cases(df),]
df$F6 <- as.integer(as.character(df$F6))
m<-mean(df$F6, na.rm = TRUE)
m
df[is.na(df)] <-  m
df[!complete.cases(df),]
counts <- ddply(df, .(df$Class, df$F6), nrow)
names(counts) <- c("Class", "F6", "Freq")
counts
x<-1
for(i in 2:7){
for(j in i:7){
if(i == j) next
n <-paste("plot",x, ".png", sep = "")
n
png(n)
plot(df[,i], df[,j], main = paste(names(df)[i], "vs", names(df)[j]),
ylab = names(df)[j],
xlab = names(df)[i])
x<-x+1
dev.off()
}
}
hist(df$F7, plot = TRUE)
hist(df$F8, plot = TRUE)
hist(df$F9, plot = TRUE)
d
d
setwd("~/CS513/cats")
rm(list = ls())
#### 1. Import dataset and libraries ####
df_train <- read.csv("./data/train.csv", na.strings = "?")
df_test <- read.csv("./data/test.csv", na.strings = "?")
library(dplyr)
library(rpart)
library(rpart.plot)
library(rattle)
library(RColorBrewer)
library(kknn)
library(C50)
library(randomForest)
library(neuralnet)
#### 1a. Cleaning of data ####
#### Renaming of columns ####
names(df_train)[1] <- 'ID'
df_test$ID <- as.character(df_test$ID)
full_df <- bind_rows(df_train, df_test)
rm(df_test)
rm(df_train)
#### Has name ####
full_df$HasName <- ifelse(full_df$Name == "", 0, 1)
### Removing Blanks in SexuponOutcome ###
i <- 1
temp <- c()
for(x in full_df$SexuponOutcome){
if(x == "" || x == "Unknown"){
temp <- c(temp,i)
}
i <- i+1
}
full_df <- full_df[-temp,]
rm(i)
rm(temp)
rm(x)
#### Removing blanks from AgeuponOutcome ####
i<-1
temp <- c()
for(x in full_df$AgeuponOutcome){
if(x == ""){
temp<-c(temp,i)
}
i<-i+1
}
full_df<- full_df[-temp,]
rm(i)
rm(temp)
rm(x)
#### Converting to Age to Days ####
full_df$TimeValue <- as.numeric(sapply(full_df$AgeuponOutcome, function(x) strsplit(x, split= ' ')[[1]][1]))
full_df$TimeUnit <- sapply(full_df$AgeuponOutcome, function(x) strsplit(x, split= ' ')[[1]][2])
full_df$TimeUnit <- gsub('s', '',full_df$TimeUnit)
mult_vector <- ifelse(full_df$TimeUnit == 'day', 1,
ifelse(full_df$TimeUnit == 'week',7,
ifelse(full_df$TimeUnit == 'month',30,
ifelse(full_df$TimeUnit == 'year', 365, NA))))
full_df$AgeinDays <- full_df$TimeValue * mult_vector
full_df$AgeinDays <- ifelse(full_df$AgeinDays <= 365, "Less than a year",
ifelse(full_df$AgeinDays <= 730, "Less than 2 years",
ifelse(full_df$AgeinDays <= 1095, "Less than 3 years","Over 3 years")))
full_df$AgeinDays <- factor(full_df$AgeinDays)
#### Breed -> Mix or Not ####
full_df$IsMix <- ifelse(grepl('Mix', full_df$Breed), 1,
ifelse(grepl('/',full_df$Breed),1,0))
#### Color -> One Word Color ####
full_df$SimpleColor <- sapply(full_df$Color, function(x) strsplit(x, split = '/| ')[[1]][1])
full_df$SimpleColor <- factor(full_df$SimpleColor)
### Is Neutered ####
full_df$IsNeutered <- ifelse(grepl('Intact', full_df$SexuponOutcome), 0, 1)
### Gender ####
full_df$Gender <- ifelse(grepl('Male', full_df$SexuponOutcome), "M", "F")
full_df$Gender <- factor(full_df$Gender)
#### 1b. New Full Dataset with good columns ####
df_full_new <- full_df[,c("ID", "OutcomeType", "AnimalType", "HasName", "AgeinDays","IsMix","SimpleColor","IsNeutered","Gender")]
# df_full_new$Gender <- as.integer(df_full_new$Gender)
df_full_new$SimpleColor <- as.integer(df_full_new$SimpleColor)
# df_full_new$AnimalType <- as.integer(df_full_new$AnimalType)
# df_full_new$OutcomeType <- as.integer(df_full_new$OutcomeType)
#### 2. Data Splits ####
i<-1
temp<- c()
for(x in df_full_new$OutcomeType){
if( is.na(x) | x == "" ){
temp <- c(temp,i)
}
i <- i + 1
}
df_test_new <- df_full_new[temp,]
df_train_new <- df_full_new[-temp,]
rm(i)
rm(x)
rm(temp)
index <- sample(1:nrow(df_train_new), .25*nrow(df_train_new))
df_test_new <- df_train_new[index,]
df_train_new <- df_train_new[-index,]
#### 2. Summary of dataset ####
summary(df_full_new)
summary(df_train_new)
summary(df_test_new)
rm(df_full_new)
rm(full_df)
rm(mult_vector)
rm(index)
#### 3. Exports into csv ####
write.csv(df_train_new, file = "./data/train_new.csv")
write.csv(df_test_new, file = "./data/test_new.csv")
rm(list = ls())
df_train <- read.csv("./data/train_new.csv")
df_test <- read.csv("./data/test_new.csv")
df_train$ID <- as.integer(df_train$ID)
data =df_train[,-1]
factor(OutcomeType)
factor(OutcomeType)~
data =df_train[,c(-1,-2)]
df_test[,c(-1,-2)]
library(e1071)
svm.model <- svm( factor(OutcomeType)~ ., data =df_train[,c(-1,-2)])
svm.pred <- predict(svm.model,  df_test[,c(-1,-2)] )
table(actual=df_test[,3],svm.pred )
SVM_wrong<- (df_test$OutcomeType!=svm.pred)
rate<-sum(SVM_wrong)/length(SVM_wrong)
rate
setwd("~/CS513/cats")
df_train <- read.csv("./data/train_new.csv")
df_test <- read.csv("./data/test_new.csv")
View(df_test)
rm(list = ls())
df_train <- read.csv("./data/train_new.csv")
df_test <- read.csv("./data/test_new.csv")
rm(list = ls())
df_train <- read.csv("./data/train_new.csv")
df_test <- read.csv("./data/test_new.csv")
rm(list = ls())
df_train <- read.csv("./data/train_new.csv")
df_test <- read.csv("./data/test_new.csv")
View(df_train)
View(df_train)
